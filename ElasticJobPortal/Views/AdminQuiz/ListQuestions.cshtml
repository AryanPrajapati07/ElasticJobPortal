@model List<ElasticJobPortal.Models.QuizQuestion>
@{
    ViewData["Title"] = "Questions by Category";
    var categories = ViewBag.Categories as List<ElasticJobPortal.Models.QuizCategory>;
    var selectedCategoryId = Context.Request.Query["categoryId"].ToString();
    var page = int.TryParse(Context.Request.Query["page"], out var p) ? p : 1;
    var pageSize = 10; // Configurable page size
    var totalPages = Model.Any() ? (int)Math.Ceiling((double)Model.Count / pageSize) : 1;
}

<section class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-center mb-6 text-gray-800">@ViewData["Title"]</h1>

    <!-- Filter and Search -->
    <div class="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
        <form method="get" asp-action="ListQuestions" class="flex items-center gap-4">
            <div>
                <label for="categoryId" class="sr-only">Select Category</label>
                <select id="categoryId" name="categoryId"
                        class="p-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500"
                        onchange="this.form.submit()"
                        aria-label="Select Quiz Category">
                    <option value="">-- All Categories --</option>
                    @foreach (var cat in categories ?? new List<ElasticJobPortal.Models.QuizCategory>())
                    {
                        var isSelected = selectedCategoryId == cat.Id.ToString();
                        <option value="@cat.Id" selected="@(isSelected ? "selected" : null)">
                            @cat.Name
                        </option>
                    }
                </select>
            </div>
           
        </form>
        <div class="w-full sm:w-64">

            <label for="question-search" class="sr-only">Search questions</label>
            <input id="question-search" type="text" placeholder="Search questions..."
                   class="w-full p-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500"
                   onkeyup="filterQuestions()"
                   aria-describedby="search-help">
            <p id="search-help" class="text-sm text-gray-500 mt-1">Type to filter questions</p>
        </div>
    </div>

    <!-- Questions Table -->
    @if (!Model.Any())
    {
        <div class="text-center text-gray-500 py-8" role="alert">
            No questions found for this category.
        </div>
    }
    else
    {
        <div class="overflow-x-auto">
            <table class="w-full bg-white rounded-lg shadow-md">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="p-3 text-left text-gray-700">#</th>
                        <th class="p-3 text-left text-gray-700 cursor-pointer" onclick="sortTable(1)">Question <span class="sort-icon">↕</span></th>
                        <th class="p-3 text-left text-gray-700 cursor-pointer" onclick="sortTable(2)">Category <span class="sort-icon">↕</span></th>
                        <th class="p-3 text-left text-gray-700">Answers</th>
                        <th class="p-3 text-left text-gray-700">Actions</th>
                    </tr>
                </thead>
                <tbody id="question-table">
                    @for (int i = (page - 1) * pageSize; i < Math.Min(page * pageSize, Model.Count); i++)
                    {
                        var question = Model[i];
                        <tr class="border-b hover:bg-gray-50" data-question="@question.QuestionText.ToLower()">
                            <td class="p-3">@(i + 1)</td>
                            <td class="p-3 max-w-md truncate">@question.QuestionText</td>
                            <td class="p-3">@(question.Category?.Name ?? "N/A")</td>
                            <td class="p-3">
                                <ul class="list-disc pl-5">
                                    @foreach (var ans in question.Answers ?? new List<ElasticJobPortal.Models.QuizAnswer>())
                                    {
                                        <li class="truncate max-w-sm">
                                            @ans.AnswerText @(ans.IsCorrect ? "✅" : "")
                                        </li>
                                    }
                                </ul>
                            </td>
                            <td class="p-3 flex gap-2 flex-wrap">
                                <a asp-action="EditQuestion" asp-route-id="@question.Id"
                                   class="bg-yellow-600 text-white px-3 py-1 rounded hover:bg-yellow-700 focus:ring-2 focus:ring-yellow-500"
                                   role="button" aria-label="Edit Question @question.QuestionText">
                                    Edit
                                </a>
                                <button type="button"
                                        onclick="showDeleteModal('@question.Id', '@question.QuestionText.Replace("'", "\\'")')"
                                        class="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 focus:ring-2 focus:ring-red-500"
                                        role="button" aria-label="Delete Question @question.QuestionText">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="flex justify-center mt-6">
            <nav aria-label="Pagination">
                <ul class="flex gap-2">
                    <li>
                        <a href="@Url.Action("ListQuestions", new { categoryId = selectedCategoryId, page = Math.Max(1, page - 1) })"
                           class="px-3 py-1 rounded-lg border border-gray-300 @(page == 1 ? "opacity-50 cursor-not-allowed" : "hover:bg-gray-100")"
                           aria-label="Previous Page" @(page == 1 ? "aria-disabled='true'" : "")>
                            Previous
                        </a>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li>
                            <a href. @Url.Action("ListQuestions", new { categoryId = selectedCategoryId, page = i })"
                               class="px-3 py-1 rounded-lg border border-gray-300 @(i == page ? "bg-blue-600 text-white" : "hover:bg-gray-100")"
                               aria-label="Page @i" @(i == page ? "aria-current='page'" : "")>
                                @i
                            </a>
                        </li>
                    }
                    <li>
                        <a href="@Url.Action("ListQuestions", new { categoryId = selectedCategoryId, page = Math.Min(totalPages, page + 1) })"
                           class="px-3 py-1 rounded-lg border border-gray-300 @(page == totalPages ? "opacity-50 cursor-not-allowed" : "hover:bg-gray-100")"
                           aria-label="Next Page" @(page == totalPages ? "aria-disabled='true'" : "")>
                            Next
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    }

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50"
         role="dialog" aria-labelledby="modal-title" aria-modal="true">
        <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4 transform transition-all duration-300 scale-95 opacity-0">
            <h2 id="modal-title" class="text-xl font-semibold text-gray-800 mb-4">Confirm Delete</h2>
            <div class="bg-yellow-100 text-yellow-800 p-4 rounded-lg mb-4" role="alert">
                Are you sure you want to delete the question: <strong id="modal-question-text"></strong>?
            </div>
            <form id="deleteForm" asp-action="DeleteQuestion" method="post">
                <input type="hidden" name="id" id="modal-question-id" />
                <div class="flex justify-end gap-4">
                    <button type="button"
                            id="cancelDeleteButton"
                            onclick="closeDeleteModal()"
                            class="bg-gray-200 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-300 focus:ring-2 focus:ring-gray-500"
                            aria-label="Cancel deletion">
                        Cancel
                    </button>
                    <button type="submit"
                            class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 focus:ring-2 focus:ring-red-500"
                            aria-label="Confirm deletion">
                        Yes, Delete
                    </button>
                </div>
            </form>
        </div>
    </div>
</section>

<!-- Include Tailwind CSS CDN -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.js"></script>
<script>
    // Filter Questions
    function filterQuestions() {
        const searchInput = document.getElementById('question-search').value.toLowerCase();
        const rows = document.querySelectorAll('#question-table tr[data-question]');

        rows.forEach(row => {
            const question = row.getAttribute('data-question');
            row.style.display = question.includes(searchInput) ? '' : 'none';
        });
    }

    // Table Sorting
    function sortTable(columnIndex) {
        const table = document.getElementById('question-table');
        const rows = Array.from(table.querySelectorAll('tr[data-question]'));
        const isAscending = table.dataset.sortOrder !== 'asc';
        table.dataset.sortOrder = isAscending ? 'asc' : 'desc';

        // Update sort icons
        document.querySelectorAll('.sort-icon').forEach(icon => icon.textContent = '↕');
        document.querySelectorAll('th')[columnIndex].querySelector('.sort-icon').textContent = isAscending ? '↑' : '↓';

        rows.sort((a, b) => {
            const aValue = a.cells[columnIndex].textContent.trim();
            const bValue = b.cells[columnIndex].textContent.trim();
            return isAscending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
        });

        // Re-append sorted rows
        rows.forEach(row => table.appendChild(row));
    }

    // Modal Functions
    function showDeleteModal(questionId, questionText) {
        const modal = document.getElementById('deleteModal');
        const modalContent = modal.querySelector('div');
        document.getElementById('modal-question-id').value = questionId;
        document.getElementById('modal-question-text').textContent = questionText;
        modal.classList.remove('hidden');
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
        modal.focus();
        console.log('Modal opened for question ID:', questionId); // Debugging
    }

    function closeDeleteModal() {
        const modal = document.getElementById('deleteModal');
        const modalContent = modal.querySelector('div');
        modalContent.classList.remove('scale-100', 'opacity-100');
        modalContent.classList.add('scale-95', 'opacity-0');
        setTimeout(() => {
            modal.classList.add('hidden');
            console.log('Modal closed'); // Debugging
        }, 300);
    }

    // Close modal on Escape key
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && !document.getElementById('deleteModal').classList.contains('hidden')) {
            closeDeleteModal();
            console.log('Modal closed via Escape key'); // Debugging
        }
    });

    // Close modal on click outside
    document.getElementById('deleteModal').addEventListener('click', (event) => {
        if (event.target === document.getElementById('deleteModal')) {
            closeDeleteModal();
            console.log('Modal closed via click outside'); // Debugging
        }
    });

    // Ensure cancel button event listener
    document.getElementById('cancelDeleteButton').addEventListener('click', () => {
        closeDeleteModal();
        console.log('Cancel button clicked'); // Debugging
    });
</script>
}

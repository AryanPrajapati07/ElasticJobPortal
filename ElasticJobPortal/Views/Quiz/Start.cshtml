@model List<QuizQuestion>
@{
    ViewData["Title"] = "Start Quiz";
    var categoryId = ViewBag.CategoryId;
    var timeLimit = ViewBag.TimeLimitInMinutes;
}

<section class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-center mb-6 text-gray-800">@ViewData["Title"]</h1>

    <!-- Timer Display -->
    <div class="flex justify-between items-center mb-8">
        <div id="timer" class="bg-yellow-100 text-yellow-800 p-4 rounded-lg font-semibold text-lg flex items-center" role="timer" aria-live="polite">
            <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Time Left: <span id="minutes">@timeLimit.ToString("D2")</span>:<span id="seconds">00</span>
        </div>
        <div class="text-gray-600">Question <span id="current-question">1</span> of @Model.Count</div>
    </div>

    <!-- Progress Bar -->
    <div class="w-full bg-gray-200 rounded-full h-2.5 mb-6">
        <div id="progress-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: @(Model.Any() ? (100.0 / Model.Count) : 0)%"></div>
    </div>

    <!-- Quiz Form -->
    <form id="quizForm" asp-action="Submit" method="post" class="space-y-6">
        <input type="hidden" name="categoryId" value="@ViewBag.CategoryId" />

        @if (!Model.Any())
        {
            <div class="text-center text-gray-500 py-8" role="alert">
                No questions available for this quiz.
            </div>
        }
        else
        {
            @for (int i = 0; i < Model.Count; i++)
            {
                var question = Model[i];
                <fieldset class="bg-white p-6 rounded-lg shadow-md" data-question-index="@i">
                    <legend class="text-lg font-semibold mb-3" id="question-@question.Id">
                        @(i + 1). @question.QuestionText
                    </legend>
                    @foreach (var ans in question.Answers)
                    {
                        <div class="flex items-center mb-2">
                            <input type="radio"
                                   id="answer-@ans.Id"
                                   name="answers[@question.Id]"
                                   value="@ans.Id"
                                   required
                                   class="h-4 w-4 text-blue-600 focus:ring-blue-500"
                                   aria-labelledby="answer-label-@ans.Id" />
                            <label id="answer-label-@ans.Id" class="ml-2 text-gray-700">@ans.AnswerText</label>
                        </div>
                    }
                </fieldset>
            }
            <div class="flex justify-end">
                <button type="submit"
                        class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
                        onclick="return confirm('Are you sure you want to submit the quiz?')">
                    Submit Quiz
                </button>
            </div>
        }
    </form>
</section>

<!-- Include Tailwind CSS CDN -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

@section Scripts {
    <script>
        let totalTime = @timeLimit * 60;
        const timerElement = document.getElementById('timer');
        const minutesElement = document.getElementById('minutes');
        const secondsElement = document.getElementById('seconds');
        const progressBar = document.getElementById('progress-bar');
        const form = document.getElementById('quizForm');
        const questionCount = @Model.Count;

        // Timer Logic
        const timer = setInterval(() => {
            let minutes = Math.floor(totalTime / 60);
            let seconds = totalTime % 60;

            minutesElement.textContent = String(minutes).padStart(2, '0');
            secondsElement.textContent = String(seconds).padStart(2, '0');

            // Warning styling when time is low
            if (totalTime <= 30) {
                timerElement.classList.remove('bg-yellow-100', 'text-yellow-800');
                timerElement.classList.add('bg-red-100', 'text-red-800');
            }

            if (totalTime <= 0) {
                clearInterval(timer);
                alert('⏰ Time is up! Submitting your quiz.');
                form.submit();
            }

            totalTime--;
        }, 1000);

        // Progress Bar Update
        function updateProgress() {
            const answered = document.querySelectorAll('input[type="radio"]:checked').length;
            const progressPercent = (answered / questionCount) * 100;
            progressBar.style.width = `${progressPercent}%`;
            document.getElementById('current-question').textContent = answered + 1 > questionCount ? questionCount : answered + 1;
        }

        // Attach change listeners to radio buttons
        document.querySelectorAll('input[type="radio"]').forEach(radio => {
            radio.addEventListener('change', updateProgress);
        });

        // Initial progress update
        updateProgress();
    </script>
}